name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install -U hatch
      - name: Lint
        run: hatch run style:lint
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lychee:
    name: Check URLs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore lychee cache
        uses: actions/cache@v4
        with:
          path: .lycheecache
          key: cache-lychee-${{ github.sha }}
          restore-keys: cache-lychee-
      - name: Run Lychee
        uses: lycheeverse/lychee-action@v2
        with:
          args: --cache --max-cache-age 1d .

  test:
    name: Test
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        py:
          - 3.9
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        platform:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python v${{ matrix.py }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
      - name: Pick environment to run
        id: env
        shell: python
        run: |
          import codecs, os, sys
          env = f"py=py3{sys.version_info[1]}\n"
          sys.stdout.write(f"Picked {env.split('=')[1].strip()} for {sys.version}\n")
          with codecs.open(os.environ["GITHUB_OUTPUT"], "a", "utf-8") as file_handler:
              file_handler.write(env)
      - name: Install dependencies
        run: pip install -U hatch
      - name: Run tests
        run: |
          hatch run +py=${{ steps.env.outputs.py }} tests:all
      - name: Convert coverage to XML
        run: |
          pip install coverage covdefaults
          coverage combine
          coverage xml
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-dist:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - lint
      - test
    name: Build package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: "3.11"
      - name: Install build dependencies
        run: pip install -U hatch
      - name: Build package
        run: hatch build
      - uses: actions/upload-artifact@v4
        with:
          path: dist/*
          name: distribution

  pypi-upload:
    name: Upload to PyPI
    needs: build-dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: distribution
          path: dist
      - uses: pypa/gh-action-pypi-publish@v1.8.14
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          # repository_url: https://test.pypi.org/legacy/
          skip-existing: true

  release:
    name: Release
    needs: build-dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get tag metadata
        id: tag
        run: |
          TAG_TITLE=${GITHUB_REF#refs/*/}
          echo "title=$TAG_TITLE" >> $GITHUB_OUTPUT
          git -c protocol.version=2 fetch --prune --progress \
            --no-recurse-submodules origin \
            +refs/heads/*:refs/remotes/origin/* +refs/tags/*:refs/tags/*
          TAG_BODY="$(git tag -l --format='%(contents)' $TAG_TITLE)"
          TAG_BODY="${TAG_BODY//'%'/'%25'}"
          TAG_BODY="${TAG_BODY//$'\n'/'%0A'}"
          TAG_BODY="${TAG_BODY//$'\r'/'%0D'}"
          echo "body=$TAG_BODY" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: softprops/action-gh-release@v2
        id: create-release
        with:
          name: ${{ steps.tag.outputs.title }}
          tag_name: ${{ steps.tag.outputs.title }}
          body: ${{ steps.tag.outputs.body }}
          draft: false
          prerelease: false
      - uses: actions/download-artifact@v4
        name: Download builds
        with:
          name: distribution
          path: dist
      - uses: shogo82148/actions-upload-release-asset@v1
        name: Upload release assets
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/*
